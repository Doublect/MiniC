program ::= extern_list decl_list 
        | decl_list

extern_list ::= extern extern_list_prime
extern_list_prime ::= extern extern_list_prime
                    | epsilon

extern ::= "extern" type_spec IDENT "(" params ")" ";"
        | "extern" type_spec IDENT "(" ")" ";"

decl_list ::= decl decl_list_prime
decl_list_prime ::= decl decl_list_prime
                  | epsilon

decl ::= var_decl 
    |  fun_decl
var_decl ::= var_type IDENT ";" 
type_spec ::= "void"
            |  var_type           
var_type  ::= "int" |  "float" |  "bool"
fun_decl ::= type_spec IDENT "(" params ")" block
        | type_spec IDENT "(" ")" block
params ::= param_list  |  "void"

param_list ::= param param_list_prime
param_list_prime ::= "," param param_list_prime
                  | epsilon

param ::= var_type IDENT
block ::= "{" local_decls stmt_list "}"

local_decls ::= local_decl local_decls_prime
local_decls_prime ::= local_decl local_decls_prime
                    | epsilon

local_decl ::= var_type IDENT ";"

stmt_list ::= stmt stmt_list_prime 
stmt_list_prime ::= stmt stmt_list_prime
                  | epsilon

stmt ::= expr_stmt 
    |  block 
    |  if_stmt 
    |  while_stmt 
    |  return_stmt
expr_stmt ::= expr ";" 
            |  ";"
while_stmt ::= "while" "(" expr ")" stmt 
if_stmt ::= "if" "(" expr ")" block else_stmt
    | "if" "(" expr ")" block
else_stmt  ::= "else" block
return_stmt ::= "return" ";" 
            |  "return" expr ";"               
# operators in order of increasing precedence      
expr ::= IDENT "=" expr
    | rval


rval ::= or_expr

# OOP
# 1. Literals
literals ::=  INT_LIT | FLOAT_LIT | BOOL_LIT
identifiers ::= IDENT | IDENT "(" args ")" | IDENT "(" ")"

primary_expr ::= literals | identifiers

parantheses_expr ::= "(" expr ")" | primary_expr
unary_expr ::= "-" unary_expr | "!" unary_expr | parantheses_expr
mult_expr ::= unary_expr mult_expr_prime
mult_expr_prime ::= "*" unary_expr mult_expr_prime | "/" unary_expr mult_expr_prime | "%" unary_expr mult_expr_prime | epsilon

add_expr ::= mult_expr add_expr_prime
add_expr_prime ::= "+" mult_expr add_expr_prime | "-" mult_expr add_expr_prime | epsilon

rel_expr ::= add_expr rel_expr_prime
rel_expr_prime ::= "<" add_expr rel_expr_prime | "<=" add_expr rel_expr_prime | ">" add_expr rel_expr_prime | ">=" add_expr rel_expr_prime| epsilon

eq_expr ::= rel_expr eq_expr_prime
eq_expr_prime ::= "==" rel_expr eq_expr_prime | "!=" rel_expr eq_expr_prime | epsilon

and_expr ::= eq_expr and_expr_prime
and_expr_prime ::= "&&" eq_expr and_expr_prime | epsilon

or_expr ::= and_expr or_expr_prime
or_expr_prime ::= "||" and_expr or_expr_prime | epsilon

args ::= arg_list 

arg_list ::= expr arg_list_prime
arg_list_prime ::= "," expr arg_list_prime
                | epsilon
